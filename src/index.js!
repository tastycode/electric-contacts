//import stateGeos from "./gz_2010_us_040_00_500k.json";
import "./styles.css";
var pdfjsLib = require("pdfjs-dist");
pdfjsLib.GlobalWorkerOptions.workerSrc = require("pdfjs-dist/build/pdf.worker.entry.js");
document.getElementById("app").innerHTML = `
<h1>REC District Contact Filter</h1>
<div>
<p>
  <label for="pdfDocument">PDF Map</label><br/>
  <input type="file" name="pdfDocument" id="pdfDocument" accept="application/pdf, application/x-pdf"/>
</p>
<p>

  <label for="csvDocument">Contacts CSV</label><br/>
  <input type="file" name="contactDocument" id="contactDocument" accept="text/csv"/>

</p>
  <p>
  <input type="submit">

  </p>
  
  
  <canvas id="pdf-canvas"></canvas>
  <svg id="svg-context"></svg>
</div>
`;
const readAsBytes = (inputNode) => {
  var reader = new FileReader();
  return new Promise((resolve, reject) => {
    reader.onload = function () {
      const arrayBuffer = reader.result;
      const array = new Uint8Array(arrayBuffer);
      resolve(array);
      //binaryString = String.fromCharCode.apply(null, array);
    };
    reader.readAsArrayBuffer(inputNode.files[0]);
  });
};

class SVGGraphicsOverride extends pdfjsLib.SVGGraphics {
  constructor(commonObjs, objs) {
    super(commonObjs, objs);
    this._currentSvgText = "";
  }
  showText = (glyphs) => {
    for (const glyph of glyphs) {
      if (glyph && glyph.unicode !== undefined)
        this._currentSvgText += glyph.unicode;
    }
    super.showText(glyphs);
  };
  endText = () => {
    super.endText();
    const svgText = this._currentSvgText;
    this._currentSvgText = "";
    this.current.txtElement.setAttribute("aria-label", svgText);
  };
}

document
  .querySelector("input[type=submit]")
  .addEventListener("click", async () => {
    const pdfBytes = await readAsBytes(document.querySelector("#pdfDocument"));

    const loadingTask = pdfjsLib.getDocument({ data: pdfBytes });
    const pdf = await new Promise((resolve, reject) => {
      loadingTask.promise.then(resolve);
    });
    const page = await pdf.getPage(1);

    const viewport = page.getViewport({ scale: 1.0 });
    const opList = await page.getOperatorList();
    const svgGfx = new SVGGraphicsOverride(page.commonObjs, page.objs);
    svgGfx.embedFonts = false;

    const svg = await svgGfx.getSVG(opList, viewport);
    // Prepare canvas using PDF page dimensions
    svg.id = "svg-context";
    document.querySelector("#svg-context").replaceWith(svg);

    const stateGeos = await (
      await fetch(
        "https://uploads.codesandbox.io/uploads/user/08efd83b-7032-4e4f-a63c-f22884438c67/vThS-gz_2010_us_040_00_500k.json"
      )
    ).json();

    const svgRoot = document.querySelector("#svg-context");
    const pathDimensions = (pathElement) => {
      const clientRect = pathElement.getBBox();
      return {
        clientRect,
        area: clientRect.width * clientRect.height
      };
    };
    const findStatePath = () => {
      // iterate over svg:path elements, calling `getBoundingClientRect` on each
      // the state path is the largest of them , or more precisely
      // is the path whose distance to the root svg bounding box is minimized
      const paths = [...svgRoot.querySelectorAll("path")];
      const sortedPaths = paths
        .map((p) => ({
          path: p,
          dimensions: pathDimensions(p)
        }))
        .sort((a, b) => {
          return b.dimensions.area - a.dimensions.area;
        });
      const maxDimensions = sortedPaths[0].dimensions;
      const threshold = maxDimensions.area * 0.9;
      const stateCandidate = sortedPaths.find(
        (p) => p.dimensions.area < threshold
      );

      debugger;
    };
    const statePath = findStatePath();

    // now we have a bounding box for the whole state
    // we also know the true bounding box in latitude and longitude
    // given the position of the state bounding box within the
    // parent bounding box, we can get the lat/long bounding box coordinates
    // of the parent
    const parentCoords = findParentCoords();

    // now we pass in the parentCoords to the SVG as meta elements
    // then call svg2geojson to convert the
  });

const findStatePath = () => {};
const findParentCoords = () => {};
